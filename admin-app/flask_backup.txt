Folder Structure:
=================
admin-app/
├── config.py
├── manage.py
├── logs/
├── project/
│   ├── __init__.py
│   ├── admin_app/
│   │   ├── routes.py
│   │   ├── __init__.py
│   ├── static/
│   │   ├── css/
│   │   │   ├── custom.css
│   │   ├── js/
│   │   │   ├── admin.js
│   ├── templates/
│   │   ├── 404.html
│   │   ├── 500.html
│   │   ├── base.html
│   │   ├── admin/
│   │   │   ├── home.html

File Contents:
==============

config.py
=========
import os

# User-configurable settings
UPLOAD_FOLDER = "F:\pipline_output"
MAX_FILE_SIZE_GB = 200
SYSTEM_NAME = "System A"
STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')

# Derived settings
MAX_FILE_SIZE = MAX_FILE_SIZE_GB * 1024 * 1024 * 1024  # Convert GB to bytes

class Config:
    UPLOAD_FOLDER = UPLOAD_FOLDER
    MAX_FILE_SIZE = MAX_FILE_SIZE
    SYSTEM_NAME = SYSTEM_NAME
    STATIC_FOLDER = STATIC_FOLDER

class DevelopmentConfig(Config):
    DEBUG = True

class ProductionConfig(Config):
    DEBUG = False

# Configuration dictionary
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}

# Allow overriding settings with environment variables
for key in ['UPLOAD_FOLDER', 'MAX_FILE_SIZE', 'SYSTEM_NAME', 'STATIC_FOLDER']:
    if os.environ.get(key):
        setattr(Config, key, os.environ.get(key))
        if key == 'MAX_FILE_SIZE':
            Config.MAX_FILE_SIZE = int(Config.MAX_FILE_SIZE)


manage.py
=========
from project import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5001, debug=True)


project\__init__.py
===================
from flask import Flask
from werkzeug.exceptions import HTTPException
import logging
from logging.handlers import RotatingFileHandler
import os
from config import Config, config

def create_app(config_name='default'):
    app = Flask(__name__)
    
    # Load the configuration
    app.config.from_object(Config)
    app.config.from_object(config[config_name])
    
    # Configure logging
    if not app.debug:
        if not os.path.exists('logs'):
            os.mkdir('logs')
        file_handler = RotatingFileHandler('logs/admin.log', maxBytes=10240, backupCount=10)
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
        ))
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)
        app.logger.setLevel(logging.INFO)
        app.logger.info('Admin Portal startup')

    # Register Blueprints
    from .admin_app.routes import admin_app
    app.register_blueprint(admin_app)

    # Custom static data
    @app.route('/static/<path:filename>')
    def custom_static(filename):
        return send_from_directory(app.config['STATIC_FOLDER'], filename)

    # Global error handler
    @app.errorhandler(Exception)
    def handle_exception(e):
        # Pass through HTTP errors
        if isinstance(e, HTTPException):
            return e

        # Now you're handling non-HTTP exceptions only
        app.logger.error(f'Unhandled exception: {str(e)}', exc_info=True)
        return jsonify({'error': 'Internal Server Error', 'message': str(e)}), 500

    return app

# Make sure to export the create_app function
__all__ = ['create_app']


project\admin_app\routes.py
===========================
from flask import Blueprint, render_template, request, jsonify, current_app, abort
import os
import json
from datetime import datetime

admin_app = Blueprint('admin_app', __name__, template_folder='../templates')

@admin_app.route('/')
@admin_app.route('/home')
def home():
    current_app.logger.info("Accessed admin home route")
    upload_folder = current_app.config['UPLOAD_FOLDER']
    search_query = request.args.get('search', '').lower()
    
    if not os.path.exists(upload_folder):
        current_app.logger.warning(f"Upload folder does not exist: {upload_folder}")
        return render_template('admin/home.html', folder_data=[], error="Upload folder does not exist")
    
    folders = [f for f in os.listdir(upload_folder) if os.path.isdir(os.path.join(upload_folder, f))]
    
    folder_data = []
    for folder in folders:
        if search_query and search_query not in folder.lower():
            continue
        
        folder_path = os.path.join(upload_folder, folder)
        json_file = next((f for f in os.listdir(folder_path) if f.endswith('.json')), None)
        
        if json_file:
            with open(os.path.join(folder_path, json_file), 'r') as f:
                metadata = json.load(f)
            
            # Extract timestamp from folder name
            try:
                # Assuming the format is now "Operation_ItemNumber-SubNumber_DeviceType_YYYY-MM-DD_HHMM"
                parts = folder.split('_')
                date_part = parts[-2]
                time_part = parts[-1]
                timestamp_str = f"{date_part}_{time_part}"
                timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d_%H%M")
            except (ValueError, IndexError):
                # If parsing fails, use the folder's creation time as a fallback
                timestamp = datetime.fromtimestamp(os.path.getctime(folder_path))
            
            folder_data.append({
                'folder_name': folder,
                'timestamp': timestamp,
                'operation': metadata.get('operation', 'N/A'),
                'date_of_collection': metadata.get('dateOfCollection', 'N/A'),
                'collection': metadata.get('collection', 'N/A'),
                'platform': metadata.get('platform', 'N/A'),
                'device_type': metadata.get('deviceType', 'N/A'),
                'serial': metadata.get('serialNumber', 'N/A'),
                'item_number': metadata.get('itemNumber', 'N/A'),
                'sub_number': metadata.get('subNumber', 'N/A'),
                'from_system': metadata.get('system', 'N/A'),
                'approved': metadata.get('approved', 'No'),
                'chunk_status': 'FILE UPLOAD COMPLETE' if os.path.exists(os.path.join(folder_path, metadata.get('new_filename', ''))) else 'UPLOAD FAIL',
                'known_passwords': metadata.get('knownPasswords', 'N/A'),
                'notes': metadata.get('notes', 'N/A'),
                'new_filename': metadata.get('new_filename', 'N/A'),
                'original_filename': metadata.get('original_filename', 'N/A'),
                'processing_method': metadata.get('processingMethod', 'Normal'),
            })
    
    # Sort folder_data by timestamp in descending order (newest first)
    folder_data.sort(key=lambda x: x['timestamp'], reverse=True)
    
    return render_template('admin/home.html', folder_data=folder_data)

@admin_app.route('/approve/<folder_name>', methods=['POST'])
def approve_folder(folder_name):
    upload_folder = current_app.config['UPLOAD_FOLDER']
    folder_path = os.path.join(upload_folder, folder_name)
    json_file = next((f for f in os.listdir(folder_path) if f.endswith('.json')), None)
    
    if json_file:
        with open(os.path.join(folder_path, json_file), 'r+') as f:
            metadata = json.load(f)
            metadata['approved'] = 'Yes'
            f.seek(0)
            json.dump(metadata, f, indent=4)
            f.truncate()
        
        # Here you would trigger the quincy process
        # For now, we'll just log it
        current_app.logger.info(f"Quincy process triggered for folder: {folder_name}")
        
        return jsonify({'status': 'success', 'message': 'Folder approved and quincy process triggered'})
    
    return jsonify({'status': 'error', 'message': 'JSON file not found'}), 404

@admin_app.route('/delete/<folder_name>', methods=['POST'])
def delete_folder(folder_name):
    upload_folder = current_app.config['UPLOAD_FOLDER']
    folder_path = os.path.join(upload_folder, folder_name)
    
    if os.path.exists(folder_path):
        try:
            current_app.logger.info(f"Folder deleted: {folder_name}")
            shutil.rmtree(folder_path)
            return jsonify({'status': 'success', 'message': 'Folder deleted'})
        except Exception as e:
            current_app.logger.error(f"Error deleting folder {folder_name}: {str(e)}")
            return jsonify({'status': 'error', 'message': f'Error deleting folder: {str(e)}'}), 500
    
    return jsonify({'status': 'error', 'message': 'Folder not found'}), 404

@admin_app.route('/check-status/<folder_name>')
def check_status(folder_name):
    upload_folder = current_app.config['UPLOAD_FOLDER']
    folder_path = os.path.join(upload_folder, folder_name)
    
    if os.path.exists(folder_path):
        json_file = next((f for f in os.listdir(folder_path) if f.endswith('.json')), None)
        if json_file:
            with open(os.path.join(folder_path, json_file), 'r') as f:
                metadata = json.load(f)
            
            inventory_file = os.path.join(folder_path, 'inventory.csv')
            if os.path.exists(inventory_file):
                with open(inventory_file, 'r') as f:
                    inventory = f.read().splitlines()
                
                total_chunks = len(inventory)
                received_chunks = sum(1 for chunk in inventory if os.path.exists(os.path.join(folder_path, chunk)))
                
                status = f"Received {received_chunks} out of {total_chunks} chunks"
                if received_chunks == total_chunks:
                    status += ". All chunks received."
                    if os.path.exists(os.path.join(folder_path, metadata.get('new_filename', ''))):
                        status += " File is complete."
                    else:
                        status += " But final file is missing."
                else:
                    status += f". Missing {total_chunks - received_chunks} chunks."
                
                return jsonify({'status': 'success', 'message': 'Status checked', 'details': status})
            else:
                return jsonify({'status': 'error', 'message': 'Inventory file not found'}), 404
        else:
            return jsonify({'status': 'error', 'message': 'Metadata file not found'}), 404
    
    return jsonify({'status': 'error', 'message': 'Folder not found'}), 404

# Error handlers
@admin_app.errorhandler(404)
def not_found_error(error):
    return render_template('404.html'), 404

@admin_app.errorhandler(500)
def internal_error(error):
    current_app.logger.error('Server Error: %s', (error))
    return render_template('500.html'), 500


project\admin_app\__init__.py
=============================



project\static\css\custom.css
=============================
/* custom.css */

body {
    font-family: 'Roboto', sans-serif;
    background-color: #f0f2f5;
    color: #333;
}

.container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
}

.card {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    margin-bottom: 20px;
    overflow: hidden;
}

.card-body {
    padding: 0;
}

.admin-item {
    border-bottom: 1px solid #e0e0e0;
    padding: 20px;
    transition: background-color 0.3s ease;
}

.admin-item:last-child {
    border-bottom: none;
}

.admin-item:hover {
    background-color: #f8f9fa;
}

.admin-item-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    margin-bottom: 15px;
}

.admin-item-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: #2c3e50;
    margin: 0;
}

.admin-item-status-group {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
}

.admin-item-content {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 15px;
}

.admin-item-field {
    margin-bottom: 10px;
}

.admin-item-label {
    font-size: 0.8rem;
    font-weight: 600;
    color: #6c757d;
    text-transform: uppercase;
    margin-bottom: 5px;
}

.admin-item-value {
    font-size: 1rem;
    color: #333;
}

.admin-item-actions {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
    padding-top: 20px;
    border-top: 1px solid #e0e0e0;
}

.btn {
    padding: 8px 16px;
    font-size: 0.9rem;
    font-weight: 600;
    text-transform: uppercase;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-approve {
    background-color: #28a745;
    color: white;
}

.btn-approve:hover {
    background-color: #218838;
}

.btn-approve:disabled {
    background-color: #6c757d;
    cursor: not-allowed;
}

.btn-delete {
    background-color: #dc3545;
    color: white;
}

.btn-delete:hover {
    background-color: #c82333;
}

.btn-check-status {
    background-color: #17a2b8;
    color: white;
}

.btn-check-status:hover {
    background-color: #138496;
}

.status-badge {
    display: inline-block;
    padding: 6px 12px;
    font-size: 0.8rem;
    font-weight: 600;
    border-radius: 20px;
    text-transform: uppercase;
    margin-right: 5px;
}

.status-complete {
    background-color: #d4edda;
    color: #155724;
}

.status-fail {
    background-color: #f8d7da;
    color: #721c24;
}

.processing-method {
    background-color: #cce5ff;
    color: #004085;
}

.search-container {
    max-width: 500px;
    margin: 0 auto 20px;
}

.input-group {
    display: flex;
}

.form-control {
    flex: 1;
    padding: 10px;
    font-size: 16px;
    border: 1px solid #ced4da;
    border-radius: 4px 0 0 4px;
}

.btn-primary {
    background-color: #007bff;
    border: none;
    color: white;
    padding: 10px 20px;
    font-size: 16px;
    cursor: pointer;
    border-radius: 0 4px 4px 0;
}

.btn-primary:hover {
    background-color: #0056b3;
}

@media (max-width: 768px) {
    .admin-item-content {
        grid-template-columns: repeat(2, 1fr);
    }
}

@media (max-width: 576px) {
    .admin-item-content {
        grid-template-columns: 1fr;
    }
    
    .admin-item-actions {
        flex-direction: column;
        align-items: flex-start;
    }
    
    .admin-item-buttons {
        margin-bottom: 1rem;
    }
}


project\static\js\admin.js
==========================
$(document).ready(function() {
    // Approve button click handler
    $('.approve-btn').on('click', function() {
        const folderName = $(this).data('folder');
        const $btn = $(this);
        
        if (confirm('Are you sure you want to approve this folder? The quincy process will be triggered.')) {
            $.post(`/approve/${folderName}`, function(response) {
                if (response.status === 'success') {
                    alert(response.message);
                    $btn.prop('disabled', true).text('Approved');
                    $btn.removeClass('btn-success').addClass('btn-secondary');
                } else {
                    alert('Error: ' + response.message);
                }
            }).fail(function(xhr, status, error) {
                alert('An error occurred: ' + error);
            });
        }
    });

    // Delete button click handler
    $('.delete-btn').on('click', function() {
        const folderName = $(this).data('folder');
        $('#deleteConfirmModal').data('folder', folderName).modal('show');
        $('#deleteConfirmInput').val(''); // Clear the input field
        $('#confirmDeleteBtn').prop('disabled', true);
    });

    // Delete confirmation input handler
    $('#deleteConfirmInput').on('input', function() {
        $('#confirmDeleteBtn').prop('disabled', $(this).val() !== 'I AGREE');
    });

    // Confirm delete button click handler
    $('#confirmDeleteBtn').on('click', function() {
        const folderName = $('#deleteConfirmModal').data('folder');
        const $row = $(`button.delete-btn[data-folder="${folderName}"]`).closest('tr');
        
        $.post(`/delete/${folderName}`, function(response) {
            if (response.status === 'success') {
                alert(response.message);
                $row.fadeOut(400, function() { $(this).remove(); });
            } else {
                alert('Error: ' + response.message);
            }
        }).fail(function(xhr, status, error) {
            alert('An error occurred: ' + error);
        });
        
        $('#deleteConfirmModal').modal('hide');
    });

    // Check status button click handler
    $('.check-status-btn').on('click', function() {
        const folderName = $(this).data('folder');
        const $btn = $(this);
        $btn.prop('disabled', true).html('<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Checking...');
        
        $.get(`/check-status/${folderName}`, function(response) {
            if (response.status === 'success') {
                $('#statusModal .modal-body').html(`<p>${response.details}</p>`);
                $('#statusModal').modal('show');
            } else {
                alert('Error: ' + response.message);
            }
        }).fail(function(xhr, status, error) {
            alert('An error occurred: ' + error);
        }).always(function() {
            $btn.prop('disabled', false).text('Check Status');
        });
    });

    // Table sorting
    $('th[data-sort]').on('click', function() {
        const column = $(this).data('sort');
        const $table = $(this).closest('table');
        const $tbody = $table.find('tbody');
        const rows = $tbody.find('tr').get();
        
        rows.sort(function(a, b) {
            const aValue = $(a).find(`td:eq(${$table.find('th').index(this)})`).text();
            const bValue = $(b).find(`td:eq(${$table.find('th').index(this)})`).text();
            return aValue.localeCompare(bValue);
        });
        
        if ($(this).hasClass('asc')) {
            rows.reverse();
            $(this).removeClass('asc').addClass('desc');
        } else {
            $(this).removeClass('desc').addClass('asc');
        }
        
        $.each(rows, function(index, row) {
            $tbody.append(row);
        });
    });

    // Search functionality
    $('#searchInput').on('keyup', function() {
        const value = $(this).val().toLowerCase();
        $('table tbody tr').filter(function() {
            $(this).toggle($(this).text().toLowerCase().indexOf(value) > -1);
        });
    });

    // Refresh button click handler
    $('#refreshBtn').on('click', function() {
        location.reload();
    });

    // Initialize tooltips
    $('[data-bs-toggle="tooltip"]').tooltip();

    // Handle modal close
    $('.modal').on('hidden.bs.modal', function() {
        $(this).find('form').trigger('reset');
    });

    // Chunk status update
    function updateChunkStatus(folderName, status) {
        $(`tr[data-folder="${folderName}"] .chunk-status`).text(status);
    }

    // Periodically check chunk status for incomplete uploads
    setInterval(function() {
        $('.check-status-btn:not(:disabled)').each(function() {
            const folderName = $(this).data('folder');
            $.get(`/check-status/${folderName}`, function(response) {
                if (response.status === 'success') {
                    updateChunkStatus(folderName, response.details);
                    if (response.details.includes('All chunks received') && response.details.includes('File is complete')) {
                        $(`button.check-status-btn[data-folder="${folderName}"]`).prop('disabled', true).remove();
                    }
                }
            });
        });
    }, 60000); // Check every minute

    // Bulk action functionality
    $('#bulkActionBtn').on('click', function() {
        const action = $('#bulkActionSelect').val();
        const selectedFolders = $('.folder-checkbox:checked').map(function() {
            return $(this).val();
        }).get();

        if (selectedFolders.length === 0) {
            alert('Please select at least one folder.');
            return;
        }

        if (action === 'approve') {
            if (confirm(`Are you sure you want to approve ${selectedFolders.length} folder(s)? The quincy process will be triggered for each.`)) {
                selectedFolders.forEach(function(folderName) {
                    $.post(`/approve/${folderName}`, function(response) {
                        if (response.status === 'success') {
                            $(`button.approve-btn[data-folder="${folderName}"]`).prop('disabled', true).text('Approved').removeClass('btn-success').addClass('btn-secondary');
                        }
                    });
                });
            }
        } else if (action === 'delete') {
            $('#bulkDeleteConfirmModal').modal('show');
        }
    });

    // Bulk delete confirmation
    $('#bulkConfirmDeleteBtn').on('click', function() {
        const selectedFolders = $('.folder-checkbox:checked').map(function() {
            return $(this).val();
        }).get();

        selectedFolders.forEach(function(folderName) {
            $.post(`/delete/${folderName}`, function(response) {
                if (response.status === 'success') {
                    $(`tr[data-folder="${folderName}"]`).fadeOut(400, function() { $(this).remove(); });
                }
            });
        });

        $('#bulkDeleteConfirmModal').modal('hide');
    });

    // Select all checkbox
    $('#selectAllCheckbox').on('change', function() {
        $('.folder-checkbox').prop('checked', $(this).prop('checked'));
    });
});


project\templates\404.html
==========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Not Found</title>
</head>
<body>
    <h1>404 Not Found</h1>
    <p>The requested page could not be found. Please check the URL and try again.</p>
    <a href="{{ url_for('client_app.home') }}">Return to Home</a>
</body>
</html>


project\templates\500.html
==========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>500 Internal Server Error</title>
</head>
<body>
    <h1>500 Internal Server Error</h1>
    <p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>
</body>
</html>


project\templates\base.html
===========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Admin Portal{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
    
    {% block extra_head %}{% endblock %}
</head>
<body>
    <!-- Classification bar -->
    <div class="bg-primary text-white p-2 text-center w-100"><strong>Admin Portal - Classified</strong></div>

    <!-- Notice bar -->
    <div class="bg-danger text-white p-2 text-center w-100" style="font-weight: bold; height: 40px; line-height: 40px; display: flex; align-items: center; justify-content: center;">Admin Notice: Handle with care</div>

    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('admin_app.home') }}">Admin Portal</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav">
                    <li class="nav-item">
                        <a class="nav-link" href="{{ url_for('admin_app.home') }}">Home</a>
                    </li>
                    <!-- Add more nav items as needed -->
                </ul>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <!-- Bootstrap JS Bundle -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
    
    <!-- jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4=" crossorigin="anonymous"></script>

    <!-- Custom JavaScript -->
    <script src="{{ url_for('static', filename='js/admin.js') }}"></script>

    {% block scripts %}{% endblock %}
</body>
</html>


project\templates\admin\home.html
=================================
{% extends "base.html" %}

{% block title %}Admin Portal{% endblock %}

{% block content %}
<div class="container">
    <h1 class="text-center mb-4">Admin Portal</h1>
    <div class="search-container">
        <form action="{{ url_for('admin_app.home') }}" method="get">
            <div class="input-group">
                <input type="text" class="form-control" placeholder="Search folder names..." name="search" value="{{ request.args.get('search', '') }}">
                <div class="input-group-append">
                    <button class="btn btn-primary" type="submit">Search</button>
                </div>
            </div>
        </form>
    </div>
    <div class="card">
        <div class="card-body">
            {% if folder_data %}
                {% for folder in folder_data %}
                <div class="admin-item">
                    <div class="admin-item-header">
                        <h2 class="admin-item-title">{{ folder.operation }}</h2>
                        <div class="admin-item-status-group">
                            <span class="status-badge {% if folder.chunk_status == 'FILE UPLOAD COMPLETE' %}status-complete{% else %}status-fail{% endif %}">
                                {{ folder.chunk_status }}
                            </span>
                            {% if folder.processing_method and folder.processing_method.lower() != 'normal' %}
                            <span class="status-badge processing-method">
                                {{ folder.processing_method }}
                            </span>
                            {% endif %}
                        </div>
                    </div>
                    <div class="admin-item-content">
                        <div class="admin-item-field">
                            <div class="admin-item-label">Date of Collection</div>
                            <div class="admin-item-value">{{ folder.date_of_collection }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Collection</div>
                            <div class="admin-item-value">{{ folder.collection }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Platform</div>
                            <div class="admin-item-value">{{ folder.platform }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Passwords</div>
                            <div class="admin-item-value">{{ folder.known_passwords }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Notes</div>
                            <div class="admin-item-value">{{ folder.notes }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Filename</div>
                            <div class="admin-item-value">{{ folder.new_filename }}</div>
                            {% if folder.new_filename != folder.original_filename %}
                            <div class="admin-item-subvalue">Original: {{ folder.original_filename }}</div>
                            {% endif %}
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Device Type</div>
                            <div class="admin-item-value">{{ folder.device_type }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Serial</div>
                            <div class="admin-item-value">{{ folder.serial }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Item Number</div>
                            <div class="admin-item-value">{{ folder.item_number }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Sub Number</div>
                            <div class="admin-item-value">{{ folder.sub_number }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">From System</div>
                            <div class="admin-item-value">{{ folder.from_system }}</div>
                        </div>
                        <div class="admin-item-field">
                            <div class="admin-item-label">Folder Name</div>
                            <div class="admin-item-value">{{ folder.folder_name }}</div>
                        </div>
                    </div>
                    <div class="admin-item-actions">
                        <div>
                            {% if folder.approved == 'Yes' %}
                            <button class="btn btn-approve" disabled>APPROVED</button>
                            {% else %}
                            <button class="btn btn-approve" data-folder="{{ folder.folder_name }}">APPROVE</button>
                            {% endif %}
                            <button class="btn btn-delete" data-folder="{{ folder.folder_name }}">DELETE</button>
                        </div>
                        {% if folder.chunk_status != 'FILE UPLOAD COMPLETE' %}
                        <button class="btn btn-check-status" data-folder="{{ folder.folder_name }}">Check Status</button>
                        {% endif %}
                    </div>
                </div>
                {% endfor %}
            {% else %}
            <p class="text-center">No folders found in the upload directory.</p>
            {% endif %}
        </div>
    </div>
</div>
{% endblock %}

