Folder Structure:
=================
client-app/
├── config.py
├── manage.py
├── logs/
├── project/
│   ├── __init__.py
│   ├── client_app/
│   │   ├── error_handlers.py
│   │   ├── file_utils.py
│   │   ├── utils.py
│   │   ├── __init__.py
│   │   ├── operations/
│   │   │   ├── cleanup_operations.py
│   │   │   ├── file_operations.py
│   │   │   ├── file_processor.py
│   │   │   ├── metadata_handler.py
│   │   │   ├── upload_handler.py
│   │   │   ├── __init__.py
│   │   ├── routes/
│   │   │   ├── cleanup_routes.py
│   │   │   ├── main_routes.py
│   │   │   ├── upload_routes.py
│   │   │   ├── __init__.py
│   ├── static/
│   │   ├── css/
│   │   │   ├── custom.css
│   │   ├── js/
│   │   │   ├── chunked-upload.js
│   │   │   ├── file-processing.js
│   │   │   ├── form-handlers.js
│   │   │   ├── modal-handlers.js
│   │   │   ├── script.js
│   │   │   ├── core/
│   │   │   │   ├── utils.js
│   │   │   ├── handlers/
│   ├── templates/
│   │   ├── 404.html
│   │   ├── 500.html
│   │   ├── base.html
│   │   ├── home.html
│   ├── tmp/
├── tmp/

File Contents:
==============

config.py
=========
import os

# User-configurable settings
UPLOAD_FOLDER = "F:\pipline_output"
MAX_FILE_SIZE_GB = 200
SYSTEM_NAME = "System A"
STATIC_FOLDER = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')

# Derived settings
MAX_FILE_SIZE = MAX_FILE_SIZE_GB * 1024 * 1024 * 1024  # Convert GB to bytes

class Config:
    UPLOAD_FOLDER = UPLOAD_FOLDER
    MAX_FILE_SIZE = MAX_FILE_SIZE
    SYSTEM_NAME = SYSTEM_NAME
    STATIC_FOLDER = STATIC_FOLDER

class DevelopmentConfig(Config):
    DEBUG = True

class ProductionConfig(Config):
    DEBUG = False

# Configuration dictionary
config = {
    'development': DevelopmentConfig,
    'production': ProductionConfig,
    'default': DevelopmentConfig
}

# Allow overriding settings with environment variables
for key in ['UPLOAD_FOLDER', 'MAX_FILE_SIZE', 'SYSTEM_NAME', 'STATIC_FOLDER']:
    if os.environ.get(key):
        setattr(Config, key, os.environ.get(key))
        if key == 'MAX_FILE_SIZE':
            Config.MAX_FILE_SIZE = int(Config.MAX_FILE_SIZE)


manage.py
=========
from project import create_app

app = create_app()

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=5000, debug=True)
    


project\__init__.py
===================
# project/__init__.py

from flask import Flask, send_from_directory
from logging.handlers import RotatingFileHandler
import logging, os
from config import Config, config
from .client_app.error_handlers import register_error_handlers

def create_app(config_name='default'):
    app = Flask(__name__)

    # Load the configuration
    app.config.from_object(Config)
    app.config.from_object(config[config_name])

    # Configure logging
    if not app.debug:
        if not os.path.exists('logs'):
            os.mkdir('logs')
        file_handler = RotatingFileHandler('logs/pipeline.log', maxBytes=10240, backupCount=10)
        file_handler.setFormatter(logging.Formatter(
            '%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]'
        ))
        file_handler.setLevel(logging.INFO)
        app.logger.addHandler(file_handler)
        app.logger.setLevel(logging.INFO)
        app.logger.info('Pipeline startup')

    # Register Blueprints
    from .client_app.routes import client_app
    app.register_blueprint(client_app)

    # Register error handlers
    register_error_handlers(app)

    # Custom static data
    @app.route('/static/<path:filename>')
    def custom_static(filename):
        return send_from_directory(app.config['STATIC_FOLDER'], filename)

    return app



project\client_app\error_handlers.py
====================================
# project/client_app/error_handlers.py

from flask import jsonify, render_template, request, current_app
from werkzeug.exceptions import HTTPException

def register_error_handlers(app):
    """Registers error handlers with the Flask app instance."""

    @app.errorhandler(404)
    def not_found_error(error):
        """Handle 404 errors."""
        if request.path.startswith('/static/'):
            return "File not found", 404
        return render_template('404.html'), 404

    @app.errorhandler(500)
    def internal_error(error):
        """Handle 500 errors."""
        current_app.logger.error(f"500 error: {str(error)}")
        return jsonify({
            'error': 'Internal server error',
            'message': str(error)
        }), 500

    @app.errorhandler(Exception)
    def handle_exception(e):
        """Handle unhandled exceptions."""
        if isinstance(e, HTTPException):
            return e
        current_app.logger.error(f"Unhandled exception: {str(e)}", exc_info=True)
        return jsonify({
            'error': 'Internal Server Error',
            'message': str(e)
        }), 500



project\client_app\file_utils.py
================================
# project/client_app/file_utils.py

"""
File utility functions for handling file operations, hashing, and verification.
"""

import os
import hashlib
from typing import Tuple, Dict
from flask import current_app
from werkzeug.utils import secure_filename

def calculate_file_hash(filepath: str, chunk_size: int = 8192) -> str:
    """
    Calculate MD5 hash of a file in chunks to handle large files efficiently.
    
    Args:
        filepath (str): Path to the file to hash
        chunk_size (int): Size of chunks to read (default: 8192 bytes)
        
    Returns:
        str: Hexadecimal representation of the MD5 hash
    """
    md5_hash = hashlib.md5()
    total_size = os.path.getsize(filepath)
    bytes_processed = 0
    
    current_app.logger.info(f"Starting MD5 hash calculation for file: {filepath}")
    
    with open(filepath, "rb") as f:
        for byte_block in iter(lambda: f.read(chunk_size), b""):
            md5_hash.update(byte_block)
            bytes_processed += len(byte_block)
            if bytes_processed % (100 * chunk_size) == 0:  # Log progress every 100 chunks
                progress = (bytes_processed / total_size) * 100
                current_app.logger.info(f"Hash calculation progress: {progress:.0f}%")
                
    hash_result = md5_hash.hexdigest()
    current_app.logger.info(f"MD5 hash calculation completed: {hash_result}")
    return hash_result

def check_existing_file(filepath: str) -> bool:
    """
    Check if a file already exists at the given path.
    
    Args:
        filepath (str): Path to check
        
    Returns:
        bool: True if file exists, False otherwise
    """
    return os.path.exists(filepath)

def get_final_filename(original_filename: str, rename_checked: bool, rename_preview: str) -> str:
    """
    Determine the final filename based on rename settings.
    
    Args:
        original_filename (str): Original file name
        rename_checked (bool): Whether rename option is checked
        rename_preview (str): Preview of new filename if rename is checked
        
    Returns:
        str: Final filename to use
    """
    if rename_checked and rename_preview:
        base, ext = os.path.splitext(rename_preview)
        return f"{base}_complete{ext}"
    else:
        base, ext = os.path.splitext(original_filename)
        return f"{base}_complete{ext}"

def handle_file_processing(
    filepath: str,
    final_path: str,
    metadata: Dict,
    rename_checked: bool = False,
    rename_preview: str = ""
) -> Tuple[bool, str, Dict]:
    """
    Process file with integrity checks and proper renaming.
    
    Args:
        filepath (str): Path to the current file
        final_path (str): Path where the file should end up
        metadata (Dict): File metadata dictionary
        rename_checked (bool): Whether rename option is checked
        rename_preview (str): Preview of new filename if rename is checked
        
    Returns:
        Tuple[bool, str, Dict]: (success, error_message, updated_metadata)
    """
    try:
        current_app.logger.info(f"Starting file processing for: {filepath}")

        if not os.path.exists(filepath):
            return False, f"Source file not found: {filepath}", metadata

        current_app.logger.info("Calculating original file hash...")
        original_hash = calculate_file_hash(filepath)
        metadata['originalFileHash'] = original_hash
        current_app.logger.info(f"Original file hash: {original_hash}")

        final_filename = get_final_filename(
            os.path.basename(filepath),
            rename_checked,
            rename_preview
        )
        
        final_path = os.path.join(os.path.dirname(final_path), final_filename)

        if os.path.exists(final_path):
            return False, f"Destination file already exists: {final_filename}", metadata

        current_app.logger.info(f"Renaming file to: {final_filename}")
        
        try:
            os.rename(filepath, final_path)
        except OSError as e:
            return False, f"Error renaming file: {str(e)}", metadata

        current_app.logger.info("Calculating final file hash...")
        final_hash = calculate_file_hash(final_path)
        metadata['finalFileHash'] = final_hash
        current_app.logger.info(f"Final file hash: {final_hash}")

        if original_hash != final_hash:
            current_app.logger.error("Hash mismatch detected!")
            try:
                os.rename(final_path, filepath)
            except OSError:
                pass
            return False, "File integrity check failed - hashes do not match", metadata

        metadata['final_filename'] = final_filename
        metadata['file_verified'] = True

        current_app.logger.info("File processing completed successfully")
        return True, "", metadata

    except Exception as e:
        current_app.logger.error(f"Error in handle_file_processing: {str(e)}")
        return False, f"Error processing file: {str(e)}", metadata

def verify_file_integrity(src_hash: str, dst_path: str) -> bool:
    """
    Verify file integrity by comparing hashes.
    
    Args:
        src_hash (str): Original file hash
        dst_path (str): Path to the file to verify
        
    Returns:
        bool: True if hashes match, False otherwise
    """
    try:
        dst_hash = calculate_file_hash(dst_path)
        return src_hash == dst_hash
    except Exception as e:
        current_app.logger.error(f"Error verifying file integrity: {str(e)}")
        return False

def get_file_size(filepath: str) -> int:
    """
    Get file size in bytes.
    
    Args:
        filepath (str): Path to the file
        
    Returns:
        int: File size in bytes
    """
    try:
        return os.path.getsize(filepath)
    except OSError as e:
        current_app.logger.error(f"Failed to get file size for {filepath}: {str(e)}")
        raise

def clean_directory(directory: str, exclude_files: list = None) -> None:
    """
    Clean a directory by removing all files except those in exclude_files.
    
    Args:
        directory (str): Directory to clean
        exclude_files (list): List of filenames to preserve
    """
    exclude_files = exclude_files or []
    try:
        for filename in os.listdir(directory):
            if filename not in exclude_files:
                filepath = os.path.join(directory, filename)
                if os.path.isfile(filepath):
                    os.remove(filepath)
                    current_app.logger.info(f"Removed file: {filepath}")
    except OSError as e:
        current_app.logger.error(f"Failed to clean directory {directory}: {str(e)}")
        raise

def is_valid_file_type(filename: str, allowed_extensions: list = None) -> bool:
    """
    Check if file has an allowed extension.
    
    Args:
        filename (str): Name of the file to check
        allowed_extensions (list): List of allowed extensions
        
    Returns:
        bool: True if file type is allowed, False otherwise
    """
    if not allowed_extensions:
        allowed_extensions = current_app.config.get('ALLOWED_EXTENSIONS', [])
    
    return '.' in filename and filename.rsplit('.', 1)[1].lower() in allowed_extensions

def format_file_size(size_in_bytes: int) -> str:
    """
    Format file size in human-readable format.
    
    Args:
        size_in_bytes (int): File size in bytes
        
    Returns:
        str: Formatted file size string (e.g., "1.5 MB")
    """
    for unit in ['B', 'KB', 'MB', 'GB', 'TB']:
        if size_in_bytes < 1024.0:
            return f"{size_in_bytes:.2f} {unit}"
        size_in_bytes /= 1024.0
    return f"{size_in_bytes:.2f} PB"


project\client_app\utils.py
===========================
# project/client_app/utils.py

"""
General utility functions for the client application.
"""

import os
from typing import Optional, Dict, Any
from flask import current_app
from datetime import datetime
from werkzeug.utils import secure_filename

def ensure_dir_exists(directory: str) -> None:
    """
    Ensure a directory exists, create it if it doesn't.
    
    Args:
        directory (str): Path to the directory
    
    Raises:
        OSError: If directory creation fails due to permissions or disk space
    """
    try:
        if not os.path.exists(directory):
            os.makedirs(directory, exist_ok=True)
            current_app.logger.info(f"Created directory: {directory}")
    except OSError as e:
        current_app.logger.error(f"Failed to create directory {directory}: {str(e)}")
        raise

def get_temp_dir() -> str:
    """
    Get the temporary directory path, create if it doesn't exist.
    
    Returns:
        str: Path to temporary directory
    
    Raises:
        ValueError: If UPLOAD_FOLDER is not configured
    """
    if not current_app.config.get('UPLOAD_FOLDER'):
        raise ValueError("UPLOAD_FOLDER not configured in application settings")
    
    temp_dir = os.path.join(current_app.config['UPLOAD_FOLDER'], 'temp')
    ensure_dir_exists(temp_dir)
    return temp_dir

def get_metadata_path(upload_folder: str, filename: str) -> str:
    """
    Get the path for a metadata file.
    
    Args:
        upload_folder (str): Base upload folder path
        filename (str): Original filename
        
    Returns:
        str: Full path to metadata file
    """
    return os.path.join(upload_folder, f"{filename}_metadata.json")

def find_metadata_file(base_folder: str, filename: str) -> Optional[str]:
    """
    Find a metadata file in the base folder and its subdirectories.
    
    Args:
        base_folder (str): Base folder to search in
        filename (str): Original filename
        
    Returns:
        Optional[str]: Path to metadata file if found, None otherwise
    """
    metadata_filename = f"{filename}_metadata.json"
    for root, _, files in os.walk(base_folder):
        if metadata_filename in files:
            return os.path.join(root, metadata_filename)
    return None

def generate_unique_filename(original_filename: str, prefix: str = "") -> str:
    """
    Generate a unique filename with timestamp.
    
    Args:
        original_filename (str): Original file name
        prefix (str): Optional prefix to add to filename
        
    Returns:
        str: Unique filename
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    base, ext = os.path.splitext(secure_filename(original_filename))
    if prefix:
        return f"{prefix}_{base}_{timestamp}{ext}"
    return f"{base}_{timestamp}{ext}"


project\client_app\__init__.py
==============================
"""Client application package."""
from flask import Blueprint
from .routes import main_routes, upload_routes, cleanup_routes

# Create the main blueprint
client_app = Blueprint('client_app', __name__, template_folder='../templates')

# Register route modules
client_app.register_blueprint(main_routes)
client_app.register_blueprint(upload_routes)
client_app.register_blueprint(cleanup_routes)

# Import error handlers
from . import error_handlers


project\client_app\operations\cleanup_operations.py
===================================================
# project/client_app/operations/cleanup_operations.py
from flask import current_app
import os
import shutil

class CleanupOperations:
    @staticmethod
    def cancel_upload(folder_name, base_upload_folder):
        """Handle upload cancellation and cleanup"""
        if not base_upload_folder:
            return {'error': 'Upload folder not configured'}, 500

        folder_path = os.path.join(base_upload_folder, folder_name)
        current_app.logger.info(f"Attempting to delete folder: {folder_path}")
        
        if not os.path.exists(folder_path):
            current_app.logger.info(f"Folder not found: {folder_path}")
            return {'status': 'success', 'message': 'Folder not found'}, 200

        try:
            shutil.rmtree(folder_path)
            current_app.logger.info(f"Successfully deleted folder: {folder_path}")
            return {'status': 'success', 'message': 'Upload cancelled and folder deleted'}, 200
        except Exception as e:
            current_app.logger.error(f"Error deleting folder: {str(e)}")
            return {'error': f'Error deleting folder: {str(e)}'}, 500


project\client_app\operations\file_operations.py
================================================
# project/client_app/operations/file_operations.py (continued)

from flask import current_app, request
import json
from ..utils import get_metadata_path, find_metadata_file
from ..file_utils import handle_file_processing
from .upload_handler import UploadHandler
from .metadata_handler import MetadataHandler
from .file_processor import FileProcessor

class FileOperations:
    @staticmethod
    def process_chunk(file, chunk, total_chunks, chunk_size, filename, base_upload_folder):
        """Handle file chunk processing"""
        if not base_upload_folder:
            raise ValueError("UPLOAD_FOLDER not set in configuration")

        current_app.logger.info(f"Processing chunk {chunk+1}/{total_chunks} for file {filename}")
        
        try:
            # Handle metadata
            if chunk == 0:
                metadata = json.loads(request.form['metadata'])
                folder_name = metadata.get('folder_name', '')
                upload_folder = UploadHandler.create_upload_folder(base_upload_folder, folder_name)
                metadata['upload_folder'] = upload_folder
                MetadataHandler.save_metadata(metadata, upload_folder, filename)
            else:
                metadata = MetadataHandler.load_metadata(base_upload_folder, filename)
                upload_folder = metadata['upload_folder']

            # Handle chunk upload
            UploadHandler.handle_chunk(file, chunk, total_chunks, chunk_size, filename, upload_folder)
            
            # Process completed upload
            if chunk == total_chunks - 1:
                filepath = os.path.join(upload_folder, filename)
                return FileProcessor.process_completed_upload(
                    filepath, upload_folder, filename, metadata
                ), 200

            return {'status': 'Chunk received'}, 200

        except Exception as e:
            current_app.logger.error(f"Error in process_chunk: {str(e)}")
            return {'error': str(e)}, 500


project\client_app\operations\file_processor.py
===============================================
# project/client_app/operations/file_processor.py

import os
from flask import current_app
from ..file_utils import calculate_file_hash, get_final_filename, verify_file_integrity
from .metadata_handler import MetadataHandler

class FileProcessor:
    @staticmethod
    def process_completed_upload(filepath: str, upload_folder: str, filename: str, metadata: dict) -> dict:
        """Process completed file upload"""
        try:
            current_app.logger.info("Starting final file processing")
            
            # Calculate original hash
            current_app.logger.info("Calculating original file hash...")
            original_hash = calculate_file_hash(filepath)
            metadata['originalFileHash'] = original_hash
            
            # Get final filename
            rename_checked = metadata.get('rename_file', False)
            rename_preview = metadata.get('new_filename', '')
            final_filename = get_final_filename(filename, rename_checked, rename_preview)
            
            # Setup final path
            final_path = os.path.join(upload_folder, final_filename)
            
            # Perform rename
            current_app.logger.info(f"Renaming file to: {final_filename}")
            os.rename(filepath, final_path)
            
            # Calculate final hash
            final_hash = calculate_file_hash(final_path)
            metadata['finalFileHash'] = final_hash
            
            # Verify hashes match
            if original_hash != final_hash:
                raise ValueError("File integrity check failed - hashes do not match")
            
            metadata['final_filename'] = final_filename
            metadata['file_verified'] = True
            
            # Update metadata file with new filename
            MetadataHandler.save_metadata(metadata, upload_folder, final_filename)
            
            # Return success response
            return {
                'status': 'File upload completed',
                'filePath': final_path,
                'metadata': metadata
            }
            
        except Exception as e:
            current_app.logger.error(f"Error in file processing: {str(e)}")
            raise


project\client_app\operations\metadata_handler.py
=================================================
# project/client_app/operations/metadata_handler.py

import os
import json
from flask import current_app
from ..utils import get_metadata_path, find_metadata_file

class MetadataHandler:
    @staticmethod
    def save_metadata(metadata: dict, upload_folder: str, filename: str) -> dict:
        """Save metadata to file"""
        try:
            metadata_path = get_metadata_path(upload_folder, filename)
            current_app.logger.info(f"Creating metadata file at: {metadata_path}")
            with open(metadata_path, 'w') as f:
                json.dump(metadata, f, indent=4)
            return metadata
        except Exception as e:
            current_app.logger.error(f"Error saving metadata: {str(e)}")
            raise

    @staticmethod
    def load_metadata(base_upload_folder: str, filename: str) -> dict:
        """Load metadata from file"""
        metadata_path = find_metadata_file(base_upload_folder, filename)
        if not metadata_path:
            raise ValueError(f"Metadata file not found for {filename}")
            
        current_app.logger.info(f"Found metadata file: {metadata_path}")
        with open(metadata_path, 'r') as f:
            return json.load(f)


project\client_app\operations\upload_handler.py
===============================================
# project/client_app/operations/upload_handler.py

from flask import current_app
import os
from werkzeug.utils import secure_filename
from ..file_utils import calculate_file_hash
from ..utils import ensure_dir_exists

class UploadHandler:
    @staticmethod
    def handle_chunk(file, chunk, total_chunks, chunk_size, filename, upload_folder):
        """Write a chunk to the file"""
        try:
            filepath = os.path.join(upload_folder, filename)
            with open(filepath, 'ab') as f:
                if chunk_size > 0:
                    f.seek(chunk * chunk_size)
                file_chunk = file.read()
                f.write(file_chunk)
            current_app.logger.info(f"Chunk written successfully")
        except Exception as e:
            current_app.logger.error(f"Error writing chunk: {str(e)}")
            raise

    @staticmethod
    def create_upload_folder(base_upload_folder, folder_name):
        """Create upload folder and return path"""
        upload_folder = os.path.join(base_upload_folder, folder_name)
        ensure_dir_exists(upload_folder)
        return upload_folder


project\client_app\operations\__init__.py
=========================================
"""Operations package for file handling and processing functionality."""
from .file_operations import FileOperations
from .cleanup_operations import CleanupOperations
from .upload_handler import UploadHandler
from .metadata_handler import MetadataHandler
from .file_processor import FileProcessor

__all__ = [
    'FileOperations',
    'CleanupOperations', 
    'UploadHandler',
    'MetadataHandler',
    'FileProcessor'
]


project\client_app\routes\cleanup_routes.py
===========================================
from flask import Blueprint, request, jsonify, current_app
import traceback
from ..operations.cleanup_operations import CleanupOperations

cleanup_routes = Blueprint('cleanup_routes', __name__)

@cleanup_routes.route('/cancel-upload', methods=['POST'])
def cancel_upload():
    """Handle upload cancellation request."""
    try:
        data = request.json
        if not data or 'folder_name' not in data:
            return jsonify({'error': 'No folder name provided'}), 400

        base_upload_folder = current_app.config.get('UPLOAD_FOLDER')
        response, status_code = CleanupOperations.cancel_upload(
            data['folder_name'], base_upload_folder
        )
        
        return jsonify(response), status_code

    except Exception as e:
        current_app.logger.error(f"Error in cancel_upload: {str(e)}")
        current_app.logger.error(traceback.format_exc())
        return jsonify({'error': str(e), 'traceback': traceback.format_exc()}), 500


project\client_app\routes\main_routes.py
========================================
from flask import Blueprint, render_template, jsonify, current_app
from ..utils import get_temp_dir

main_routes = Blueprint('main_routes', __name__)

@main_routes.route('/')
@main_routes.route('/home')
def home():
    """Render the home page."""
    current_app.logger.info("Accessed home route")
    return render_template('home.html')

@main_routes.route('/config')
def get_config():
    """Get application configuration."""
    config = {
        'UPLOAD_FOLDER': current_app.config.get('UPLOAD_FOLDER', '/tmp/uploads'),
        'MAX_FILE_SIZE': current_app.config.get('MAX_FILE_SIZE', 200 * 1024 * 1024 * 1024),
        'SYSTEM_NAME': current_app.config.get('SYSTEM_NAME', 'Unknown')
    }
    current_app.logger.info(f"Config requested: {config}")
    return jsonify(config)


project\client_app\routes\upload_routes.py
==========================================
from flask import Blueprint, request, jsonify, current_app
from werkzeug.utils import secure_filename
import traceback
import os
from ..operations.file_operations import FileOperations
from ..file_utils import calculate_file_hash, verify_file_integrity
from ..utils import get_temp_dir

upload_routes = Blueprint('upload_routes', __name__)

@upload_routes.route('/upload-chunk', methods=['POST'])
def upload_chunk():
    """Handle file chunk uploads."""
    try:
        current_app.logger.info("Received chunk upload request")
        file = request.files['file']
        chunk = int(request.form['chunk'])
        total_chunks = int(request.form['totalChunks'])
        chunk_size = int(request.form.get('chunkSize', 0))
        filename = secure_filename(file.filename)
        
        base_upload_folder = current_app.config.get('UPLOAD_FOLDER')
        response, status_code = FileOperations.process_chunk(
            file, chunk, total_chunks, chunk_size, filename, base_upload_folder
        )
        
        return jsonify(response), status_code

    except Exception as e:
        current_app.logger.error(f"Error in upload_chunk: {str(e)}")
        current_app.logger.error(traceback.format_exc())
        return jsonify({'error': str(e), 'traceback': traceback.format_exc()}), 500

@upload_routes.route('/calculate-hash', methods=['POST'])
def calculate_initial_hash():
    """Calculate hash of uploaded file."""
    try:
        current_app.logger.info("Starting hash calculation")
        file = request.files['file']
        if not file:
            raise ValueError("No file received")

        temp_dir = get_temp_dir()
        temp_path = os.path.join(temp_dir, secure_filename(file.filename))
        current_app.logger.info(f"Saving file to temp location: {temp_path}")
        
        file.save(temp_path)
        
        current_app.logger.info("Calculating file hash...")
        file_hash = calculate_file_hash(temp_path)
        current_app.logger.info(f"Hash calculated: {file_hash}")
        
        try:
            os.remove(temp_path)
            current_app.logger.info("Temporary file removed")
        except Exception as e:
            current_app.logger.warning(f"Failed to remove temporary file: {str(e)}")
        
        return jsonify({'hash': file_hash})

    except Exception as e:
        current_app.logger.error(f"Hash calculation error: {str(e)}")
        current_app.logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500

@upload_routes.route('/verify-file', methods=['POST'])
def verify_file():
    """Verify uploaded file integrity."""
    try:
        data = request.json
        if not data:
            raise ValueError("No data received")
        
        original_hash = data.get('originalHash')
        file_path = data.get('filePath')
        
        if not all([original_hash, file_path]):
            raise ValueError("Missing required parameters: originalHash or filePath")
        
        current_app.logger.info(f"Verifying file: {file_path}")
        verified = verify_file_integrity(original_hash, file_path)
        
        result = {
            'verified': verified,
            'newHash': calculate_file_hash(file_path) if verified else None,
            'finalFilename': os.path.basename(file_path)
        }
        
        current_app.logger.info(f"Verification completed. Result: {result}")
        return jsonify(result)
        
    except Exception as e:
        current_app.logger.error(f"Verification error: {str(e)}")
        current_app.logger.error(traceback.format_exc())
        return jsonify({'error': str(e)}), 500


project\client_app\routes\__init__.py
=====================================
# project/client_app/routes/__init__.py

from flask import Blueprint
from .main_routes import main_routes
from .upload_routes import upload_routes
from .cleanup_routes import cleanup_routes

# Create the main blueprint
client_app = Blueprint('client_app', __name__, template_folder='../templates')

# Register routes
client_app.register_blueprint(main_routes)
client_app.register_blueprint(upload_routes)
client_app.register_blueprint(cleanup_routes)



project\static\css\custom.css
=============================
/* custom.css */

.modal-dialog {
    max-width: 80%; /* Increase modal width */
    width: 800px; /* Set a fixed width */
}

.modal-body {
    max-height: 70vh; /* Set maximum height */
    overflow-y: auto; /* Allow vertical scrolling if content exceeds max-height */
}

.confirmation-table {
    width: 100%;
    font-size: 0.9rem; /* Reduce font size slightly */
}

.confirmation-table th {
    white-space: nowrap;
    padding: 8px 4px;
}
.confirmation-table td {
    max-width: 200px; /* Set maximum width for cells */
    overflow-wrap: break-word; /* Allow long words to break and wrap */
    word-wrap: break-word; /* For older browsers */
    word-break: break-word; /* Allow breaking of non-English words */
}

.confirmation-table .from-value {
    max-width: 300px; /* Give more space for the 'From Value' column */
}

.confirmation-table .reviewed-column {
    width: 90px; /* Set a fixed width for the 'Reviewed' column */
    text-align: center;
}


project\static\js\chunked-upload.js
===================================
// chunked-upload.js

const CHUNK_SIZE = 10 * 1024 * 1024; // 10MB chunks

async function uploadFile(file, metadata, progressCallback, abortSignal) {
    const totalChunks = Math.ceil(file.size / CHUNK_SIZE);
    let uploadedChunks = 0;

    for (let start = 0; start < file.size; start += CHUNK_SIZE) {
        // Check if upload has been cancelled
        if (abortSignal?.aborted) {
            throw new DOMException('Upload cancelled by user', 'AbortError');
        }

        const chunk = file.slice(start, start + CHUNK_SIZE);
        const formData = new FormData();
        formData.append('file', chunk, file.name);
        formData.append('chunk', uploadedChunks);
        formData.append('totalChunks', totalChunks);
        formData.append('chunkSize', CHUNK_SIZE);
        
        if (uploadedChunks === 0) {
            formData.append('metadata', JSON.stringify(metadata));
        }

        try {
            const response = await fetch('/upload-chunk', {
                method: 'POST',
                body: formData,
                signal: abortSignal
            });

            if (!response.ok) {
                const responseText = await response.text();
                throw new Error(`HTTP error! status: ${response.status}, body: ${responseText}`);
            }

            const result = await response.json();
            console.log('Chunk upload result:', result);

            uploadedChunks++;
            const progress = (uploadedChunks / totalChunks) * 100;
            progressCallback(progress);
        } catch (error) {
            if (error.name === 'AbortError') {
                throw error; // Re-throw abort errors
            }
            console.error('Error during chunk upload:', error);
            throw error;
        }
    }

    // Check if upload has been cancelled before completing
    if (abortSignal?.aborted) {
        throw new DOMException('Upload cancelled by user', 'AbortError');
    }
}


project\static\js\file-processing.js
====================================
// file-processing.js

let currentUpload = null;
let currentFolderName = null;

async function processFile(file, metadata) {
    try {
        // Step 1: Calculate original hash
        modalHandlers.updateProgress('Gathering file information...', 'calculating');
        const formData = new FormData();
        formData.append('file', file);
        
        const hashResponse = await fetch('/calculate-hash', {
            method: 'POST',
            body: formData
        });
        
        if (!hashResponse.ok) {
            throw new Error('Failed to calculate file hash');
        }
        
        const hashResult = await hashResponse.json();
        metadata.originalFileHash = hashResult.hash;
        
        // Step 2: Upload file
        modalHandlers.updateProgress('Starting file transfer...', 0);
        const uploadResult = await uploadFile(file, metadata, modalHandlers.updateProgress);
        
        if (uploadResult.error) {
            throw new Error(uploadResult.error);
        }
        
        // Step 3: Verify integrity
        modalHandlers.updateProgress('Verifying file integrity...', 'verifying');
        const verificationResponse = await fetch('/verify-file', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({
                originalHash: metadata.originalFileHash,
                filePath: uploadResult.filePath
            })
        });
        
        if (!verificationResponse.ok) {
            throw new Error('File verification failed');
        }
        
        const verificationResult = await verificationResponse.json();
        
        // Step 4: Show completion information
        modalHandlers.showCompletionInfo({
            originalFilename: file.name,
            newFilename: verificationResult.finalFilename,
            originalHash: metadata.originalFileHash,
            newHash: verificationResult.newHash,
            fileSize: file.size,
            verified: verificationResult.verified
        });
        
        return verificationResult;
    } catch (error) {
        throw error;
    }
}

async function cancelUploadOnServer(folderName) {
    if (!folderName) {
        console.log('No folder name provided for cleanup');
        return;
    }

    try {
        const response = await fetch('/cancel-upload', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ folder_name: folderName })
        });

        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.error || 'Failed to clean up cancelled upload');
        }

        const result = await response.json();
        console.log('Cleanup result:', result);
    } catch (error) {
        console.error('Error during cleanup:', error);
        throw error;
    }
}

// Export functions and variables
window.fileProcessing = {
    processFile,
    cancelUploadOnServer,
    getCurrentUpload: () => currentUpload,
    setCurrentUpload: (upload) => { currentUpload = upload },
    getCurrentFolderName: () => currentFolderName,
    setCurrentFolderName: (name) => { currentFolderName = name }
};


project\static\js\form-handlers.js
==================================
// Complete form-handlers.js

// Function to update the submit button state based on checkbox status
function updateSubmitButtonState() {
    const totalCheckboxes = $('.review-checkbox').length;
    const checkedCheckboxes = $('.review-checkbox:checked').length;
    const allChecked = totalCheckboxes > 0 && checkedCheckboxes === totalCheckboxes;
    $('#confirmSubmit').prop('disabled', !allChecked);
    console.log(`Checkboxes: ${checkedCheckboxes}/${totalCheckboxes} checked`);
}

// Function to update the rename preview
function updateRenamePreview() {
    console.log('Updating rename preview');
    const operation = $('#operation').val().replace(/\s+/g, '_');
    const itemNumber = $('#itemNumber').val();
    const subNumber = $('#subNumber').val();
    const deviceType = $('#deviceType').val();
    const collectionDate = $('#dateOfCollection').val();
    const fileInput = $('#selectFile')[0];
    let fileExtension = '';

    if (fileInput.files.length > 0) {
        const fileName = fileInput.files[0].name;
        const lastDotIndex = fileName.lastIndexOf('.');
        if (lastDotIndex !== -1) {
            fileExtension = fileName.substring(lastDotIndex);
        }
    }

    const renamePreview = `${operation}_${itemNumber}-${subNumber}_${deviceType}_${collectionDate}${fileExtension}`;
    $('#renamePreview').val(renamePreview);
}

// Function to populate the confirmation modal with form data
function populateConfirmationModal() {
    const fileInput = document.getElementById('selectFile');
    const fields = [
        { name: 'File', value: fileInput.files.length > 0 ? `${fileInput.files[0].name} (${utils.formatFileSize(fileInput.files[0].size)})` : 'No file selected' },
        { name: 'Operation', value: $('#operation').val() },
        { name: 'Device Type', value: $('#deviceType').val() },
        { name: 'Serial Number', value: $('#serialNumber').val() },
        { name: 'Item Number', value: $('#itemNumber').val() },
        { name: 'Sub Number', value: $('#subNumber').val() },
        { name: 'Collection', value: $('#collection').val() },
        { name: 'Platform', value: $('#platform').val() },
        { name: 'Date of Collection', value: $('#dateOfCollection').val() },
        { name: 'Known Passwords', value: $('#knownPasswords').val() },
        { name: 'Notes', value: $('#notes').val() },
        { name: 'Rename File', value: $('#renameFileCheck').is(':checked') ? 'Yes' : 'No' },
        { name: 'New File Name', value: $('#renamePreview').val() },
        { name: 'Processing Method', value: $('#processingMethod').val() }
    ];

    let confirmationTableBody = $('#confirmationTableBody');
    confirmationTableBody.empty();

    fields.forEach((field, index) => {
        let row = `<tr>
            <td>${field.name}</td>
            <td class="from-value">${field.value}</td>
            <td class="reviewed-column">
                <input type="checkbox" class="review-checkbox form-check-input" data-index="${index}">
            </td>
        </tr>`;
        confirmationTableBody.append(row);
    });

    // Reset submit button state
    $('#confirmSubmit').prop('disabled', true);
}

// Function to handle the confirm submit button click
async function handleConfirmSubmit(e) {
    e.preventDefault();
    console.log('Confirm submit clicked');

    const fileInput = $('#selectFile')[0];
    const file = fileInput.files[0];
    
    if (!file) {
        alert('Please select a file');
        return;
    }

    const renameFileChecked = $('#renameFileCheck').is(':checked');
    const newFilename = renameFileChecked ? $('#renamePreview').val() : file.name;
    const currentTime = new Date().toLocaleTimeString('en-US', { 
        hour12: false, 
        hour: '2-digit', 
        minute: '2-digit' 
    }).replace(':', '');
    
    const folderName = `${$('#renamePreview').val().split('.')[0]}_${currentTime}`;
    fileProcessing.setCurrentFolderName(folderName);

    const metadata = {
        original_filename: file.name,
        new_filename: renameFileChecked ? newFilename : "",
        rename_file: renameFileChecked,
        operation: $('#operation').val(),
        deviceType: $('#deviceType').val(),
        serialNumber: $('#serialNumber').val(),
        itemNumber: $('#itemNumber').val(),
        subNumber: $('#subNumber').val(),
        collection: $('#collection').val(),
        platform: $('#platform').val(),
        dateOfCollection: $('#dateOfCollection').val(),
        knownPasswords: $('#knownPasswords').val(),
        notes: $('#notes').val(),
        processingMethod: $('#processingMethod').val(),
        approved: 'No',
        system: systemName,
        folder_name: folderName
    };

    try {
        $('#confirmationModal').modal('hide');
        modalHandlers.showProgressModal();
        
        fileProcessing.setCurrentUpload(new AbortController());
        console.log('Starting file processing');
        
        const result = await fileProcessing.processFile(file, metadata);
        
        if (!result.verified) {
            throw new Error('File verification failed');
        }
        
    } catch (error) {
        console.error('Processing error:', error);
        if (error.name === 'AbortError') {
            console.log('Upload was cancelled by user');
            try {
                await fileProcessing.cancelUploadOnServer(fileProcessing.getCurrentFolderName());
                alert('Upload cancelled and files cleaned up.');
            } catch (cleanupError) {
                console.error('Error cleaning up cancelled upload:', cleanupError);
                alert('Upload cancelled but cleanup failed. Please contact administrator.');
            }
        } else {
            alert(`Error processing file: ${error.message}`);
        }
        $('#progressModal').modal('hide');
    } finally {
        fileProcessing.setCurrentUpload(null);
        fileProcessing.setCurrentFolderName(null);
    }
}

// Initialize form handlers when document is ready
$(document).ready(function() {
    // Pre-fill button handler
    $('#preFill').on('click', function(e) {
        e.preventDefault();
        console.log('Pre-fill button clicked');
        
        const today = new Date().toISOString().split('T')[0];
        
        $('#operation').val('Sample Operation');
        $('#deviceType').val('laptop');
        $('#serialNumber').val('12345');
        $('#itemNumber').val('001');
        $('#subNumber').val('1');
        $('#collection').val('red');
        $('#platform').val('red');
        $('#dateOfCollection').val(today);
        $('#knownPasswords').val('password1,password2');
        $('#notes').val('Sample notes for data ingestion.');
        $('#processingMethod').val('Normal');
        
        updateRenamePreview();
        console.log('Pre-fill completed');
    });

    // Initial Submit button handler - opens the confirmation modal
    $('#openConfirmationModal').on('click', function(e) {
        e.preventDefault();
        console.log('Open confirmation modal clicked');
        
        if (!$('#selectFile')[0].files.length) {
            alert('Please select a file first');
            return;
        }
        
        updateRenamePreview();
        populateConfirmationModal();
        $('#confirmationModal').modal('show');
    });

    // Review submit button handler
    $(document).on('click', '#confirmSubmit', handleConfirmSubmit);

    // Review checkbox change handler
    $(document).on('change', '.review-checkbox', function() {
        updateSubmitButtonState();
    });

    // Cancel button handler
    $('#cancelReview').on('click', function() {
        $('#confirmationModal').modal('hide');
    });

    // File input change handler
    $('#selectFile').on('change', function() {
        const fileInput = $(this)[0];
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            $('#fileName').val(file.name);
            $('#fileSize').text(utils.formatFileSize(file.size));
            updateRenamePreview();
        }
    });

    // Form field change handlers
    $('#operation, #itemNumber, #subNumber, #deviceType, #dateOfCollection').on('input change', function() {
        console.log('Form field changed, updating preview');
        updateRenamePreview();
    });

    // Rename checkbox handler
    $('#renameFileCheck').on('change', function() {
        console.log('Rename checkbox changed');
        updateRenamePreview();
    });

    // Cancel upload handler
    $('#cancelUpload').on('click', async function() {
        const currentUpload = fileProcessing.getCurrentUpload();
        if (currentUpload) {
            $('#progressText').text('Cancelling upload...');
            currentUpload.abort();
        }
    });

    // Complete button handler
    $('#completeButton').on('click', function() {
        $('#progressModal').modal('hide');
    });

    // Secret sequence handler
    let secretSequence = '';
    $(document).on('keypress', function(e) {
        secretSequence += String.fromCharCode(e.which);
        if (secretSequence.endsWith('xxx')) {
            $('.review-checkbox').prop('checked', true);
            updateSubmitButtonState();
            secretSequence = '';
        }
        if (secretSequence.length > 10) {
            secretSequence = '';
        }
    });
});


project\static\js\modal-handlers.js
===================================
// modal-handlers.js

function showProgressModal(initialMessage = 'Initializing...') {
    $('#progressBar')
        .css('width', '0%')
        .attr('aria-valuenow', 0)
        .removeClass('progress-bar-striped progress-bar-animated');
    $('#progressText').text(initialMessage);
    $('#progressDetails').text('');
    $('#completionInfo').addClass('d-none');
    $('#cancelUpload').removeClass('d-none');
    $('#completeButton').addClass('d-none');
    $('#progressModal').modal('show');
}

function updateProgress(message, progress) {
    const progressBar = $('#progressBar');
    const progressText = $('#progressText');
    
    progressText.text(message);
    
    if (progress === 'calculating' || progress === 'checking' || progress === 'verifying') {
        progressBar.addClass('progress-bar-striped progress-bar-animated')
            .css('width', '100%');
        progressBar.attr('aria-valuenow', 100);
    } else if (typeof progress === 'number') {
        progressBar.removeClass('progress-bar-striped progress-bar-animated')
            .css('width', `${Math.round(progress)}%`);
        progressBar.attr('aria-valuenow', Math.round(progress));
        progressText.text(`Uploading... ${Math.round(progress)}%`);
    }
}

function showCompletionInfo(info) {
    $('#completionInfo').removeClass('d-none');
    $('#origFilename').text(info.originalFilename);
    $('#newFilename').text(info.newFilename);
    $('#origHash').text(info.originalHash);
    $('#newHash').text(info.newHash);
    $('#fileSize').text(formatFileSize(info.fileSize));
    
    const verificationBadge = info.verified ? 
        `<div class="badge bg-success p-2 fs-6">Verified</div>` :
        `<div class="badge bg-danger p-2 fs-6">Not Verified</div>`;
    $('#verificationStatus').html(verificationBadge);
    
    $('#cancelUpload').addClass('d-none');
    $('#completeButton').removeClass('d-none');
}

function updateSubmitButtonState() {
    const totalCheckboxes = $('.form-check-input').length;
    const checkedCheckboxes = $('.form-check-input:checked').length;
    const allChecked = totalCheckboxes > 0 && checkedCheckboxes === totalCheckboxes;
    console.log(`Checkboxes status: ${checkedCheckboxes}/${totalCheckboxes}`);
    $('#confirmSubmit').prop('disabled', !allChecked);
}

function populateConfirmationModal() {
    const fileInput = document.getElementById('selectFile');
    const fields = [
        { name: 'File', value: fileInput.files.length > 0 ? `${fileInput.files[0].name} (${formatFileSize(fileInput.files[0].size)})` : 'No file selected' },
        { name: 'Operation', value: $('#operation').val() },
        { name: 'Device Type', value: $('#deviceType').val() },
        { name: 'Serial Number', value: $('#serialNumber').val() },
        { name: 'Item Number', value: $('#itemNumber').val() },
        { name: 'Sub Number', value: $('#subNumber').val() },
        { name: 'Collection', value: $('#collection').val() },
        { name: 'Platform', value: $('#platform').val() },
        { name: 'Date of Collection', value: $('#dateOfCollection').val() },
        { name: 'Known Passwords', value: $('#knownPasswords').val() },
        { name: 'Notes', value: $('#notes').val() },
        { name: 'Rename File', value: $('#renameFileCheck').is(':checked') ? 'Yes' : 'No' },
        { name: 'New File Name', value: $('#renamePreview').val() },
        { name: 'Processing Method', value: $('#processingMethod').val() }
    ];

    let confirmationTableBody = $('#confirmationTableBody');
    confirmationTableBody.empty();

    fields.forEach((field, index) => {
        let row = `<tr>
            <td>${field.name}</td>
            <td class="from-value">${field.value}</td>
            <td class="reviewed-column">
                <input type="checkbox" class="form-check-input" data-index="${index}">
            </td>
        </tr>`;
        confirmationTableBody.append(row);
    });

    // Reset submit button state
    $('#confirmSubmit').prop('disabled', true);
}

// Helper function for file size formatting
function formatFileSize(bytes) {
    if (bytes === 0) return '0 Bytes';
    const k = 1024;
    const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
}

// Initialize event handlers
$(document).ready(function() {
    // Bind the submit button click handler
    $('#confirmSubmit').off('click').on('click', function(e) {
        e.preventDefault();
        console.log('Submit button clicked');
        
        const fileInput = $('#selectFile')[0];
        const file = fileInput.files[0];
        if (!file) {
            alert('Please select a file');
            return;
        }

        const renameFileChecked = $('#renameFileCheck').is(':checked');
        const newFilename = renameFileChecked ? $('#renamePreview').val() : file.name;
        const currentTime = new Date().toLocaleTimeString('en-US', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit' 
        }).replace(':', '');
        
        const folderName = `${$('#renamePreview').val().split('.')[0]}_${currentTime}`;
        fileProcessing.setCurrentFolderName(folderName);

        const metadata = {
            original_filename: file.name,
            new_filename: renameFileChecked ? newFilename : "",
            rename_file: renameFileChecked,
            operation: $('#operation').val(),
            deviceType: $('#deviceType').val(),
            serialNumber: $('#serialNumber').val(),
            itemNumber: $('#itemNumber').val(),
            subNumber: $('#subNumber').val(),
            collection: $('#collection').val(),
            platform: $('#platform').val(),
            dateOfCollection: $('#dateOfCollection').val(),
            knownPasswords: $('#knownPasswords').val(),
            notes: $('#notes').val(),
            processingMethod: $('#processingMethod').val(),
            approved: 'No',
            system: systemName,
            folder_name: folderName
        };

        try {
            $('#confirmationModal').modal('hide');
            showProgressModal();
            
            fileProcessing.setCurrentUpload(new AbortController());
            
            fileProcessing.processFile(file, metadata).then(result => {
                if (!result.verified) {
                    throw new Error('File verification failed');
                }
            }).catch(error => {
                console.error('Processing error:', error);
                alert(`Error processing file: ${error.message}`);
                $('#progressModal').modal('hide');
            });
            
        } catch (error) {
            console.error('Submit error:', error);
            alert(`Error: ${error.message}`);
            $('#progressModal').modal('hide');
        }
    });

    // Bind checkbox change handler
    $(document).on('change', '.form-check-input', function() {
        updateSubmitButtonState();
    });

    // Secret sequence handler
    let secretSequence = '';
    $(document).on('keypress', function(e) {
        secretSequence += String.fromCharCode(e.which);
        if (secretSequence.endsWith('xxx')) {
            $('.form-check-input').prop('checked', true);
            updateSubmitButtonState();
            secretSequence = '';
        }
        if (secretSequence.length > 10) {
            secretSequence = '';
        }
    });
});

// Export functions
window.modalHandlers = {
    showProgressModal,
    updateProgress,
    showCompletionInfo,
    populateConfirmationModal
};


project\static\js\script.js
===========================
// project/static/js/script.js

let fileSaveLocation;
let maxFileSizeGB;
let systemName;

// Fetch configuration from the server
fetch('/config')
    .then(response => response.json())
    .then(config => {
        fileSaveLocation = config.UPLOAD_FOLDER;
        maxFileSizeGB = config.MAX_FILE_SIZE / (1024 * 1024 * 1024); // Convert bytes to GB
        systemName = config.SYSTEM_NAME;
        $('#fileSizeMessage').text(`Maximum upload size is ${maxFileSizeGB} GB`);
    })
    .catch(error => console.error('Error fetching config:', error));

// Wait for document to be ready
$(document).ready(function () {
    console.log('Document ready - initializing handlers');
    
    // Initialize default values
    $('#processingMethod').val('Normal');
    
    // Pre-fill button handler
    $('#preFill').on('click', function(e) {
        console.log('Pre-fill button clicked');
        e.preventDefault();
        
        $('#operation').val('Sample Operation');
        $('#deviceType').val('unknown');
        $('#serialNumber').val('12345');
        $('#itemNumber').val('001');
        $('#subNumber').val('1');
        $('#collection').val('unknown');
        $('#platform').val('unknown');
        $('#dateOfCollection').val(new Date().toISOString().split('T')[0]);
        $('#knownPasswords').val('password1,password2');
        $('#notes').val('Sample notes for data ingestion.');
        $('#processingMethod').val('Normal');
        
        // Trigger rename preview update
        updateRenamePreview();
        
        console.log('Pre-fill completed');
    });

    // Submit button handler
    $('#openConfirmationModal').on('click', function(e) {
        console.log('Submit button clicked');
        e.preventDefault();
        
        // Check if file is selected
        if (!$('#selectFile')[0].files.length) {
            alert('Please select a file first');
            return;
        }
        
        updateRenamePreview();
        modalHandlers.populateConfirmationModal();
    });

    // File input change handler
    $('#selectFile').on('change', function () {
        const fileInput = $(this)[0];
        if (fileInput.files.length > 0) {
            const file = fileInput.files[0];
            $('#fileName').val(file.name);
            $('#fileSize').text(utils.formatFileSize(file.size));
            updateRenamePreview();
            checkFileSize(file);
        } else {
            $('#fileName').val('');
            $('#fileSize').text('');
            $('#fileSizeMessage').text(`Maximum upload size is ${maxFileSizeGB} GB`).removeClass('text-danger');
        }
    });

    // Form field change handlers
    $('#operation, #itemNumber, #subNumber, #deviceType, #dateOfCollection').on('input change', function() {
        console.log('Form field changed, updating preview');
        updateRenamePreview();
    });

    // Rename checkbox handler
    $('#renameFileCheck').on('change', function() {
        console.log('Rename checkbox changed');
        updateRenamePreview();
    });

    // Submit confirmation handler
    $('#confirmSubmit').on('click', async function(e) {
        console.log('Confirm submit clicked');
        e.preventDefault();

        const fileInput = $('#selectFile')[0];
        const file = fileInput.files[0];
        if (!file) {
            alert('Please select a file');
            return;
        }

        const renameFileChecked = $('#renameFileCheck').is(':checked');
        const newFilename = renameFileChecked ? $('#renamePreview').val() : file.name;
        const currentTime = utils.getTimestamp();
        const folderName = `${$('#renamePreview').val().split('.')[0]}_${currentTime}`;

        fileProcessing.setCurrentFolderName(folderName);

        const metadata = {
            original_filename: file.name,
            new_filename: renameFileChecked ? newFilename : "",
            rename_file: renameFileChecked,
            operation: $('#operation').val(),
            deviceType: $('#deviceType').val(),
            serialNumber: $('#serialNumber').val(),
            itemNumber: $('#itemNumber').val(),
            subNumber: $('#subNumber').val(),
            collection: $('#collection').val(),
            platform: $('#platform').val(),
            dateOfCollection: $('#dateOfCollection').val(),
            knownPasswords: $('#knownPasswords').val(),
            notes: $('#notes').val(),
            processingMethod: $('#processingMethod').val(),
            approved: 'No',
            system: systemName,
            folder_name: folderName
        };

        try {
            $('#confirmationModal').modal('hide');
            modalHandlers.showProgressModal();
            
            fileProcessing.setCurrentUpload(new AbortController());
            console.log('Starting file processing');
            
            const result = await fileProcessing.processFile(file, metadata);
            
            if (!result.verified) {
                throw new Error('File verification failed');
            }
            
        } catch (error) {
            console.error('Processing error:', error);
            if (error.name === 'AbortError') {
                console.log('Upload was cancelled by user');
                try {
                    await fileProcessing.cancelUploadOnServer(fileProcessing.getCurrentFolderName());
                    alert('Upload cancelled and files cleaned up.');
                } catch (cleanupError) {
                    console.error('Error cleaning up cancelled upload:', cleanupError);
                    alert('Upload cancelled but cleanup failed. Please contact administrator.');
                }
            } else {
                alert(`Error processing file: ${error.message}`);
            }
            $('#progressModal').modal('hide');
        } finally {
            fileProcessing.setCurrentUpload(null);
            fileProcessing.setCurrentFolderName(null);
        }
    });
});

// File size checking function
function checkFileSize(file) {
    const fileSizeInGB = file.size / (1024 * 1024 * 1024);
    const fileSizeMessage = $('#fileSizeMessage');
    
    if (fileSizeInGB > maxFileSizeGB) {
        fileSizeMessage.text(`File is too large. Maximum size is ${maxFileSizeGB} GB. Your file is ${fileSizeInGB.toFixed(2)} GB.`).addClass('text-danger');
        $('#selectFile').val(''); // Clear the file input
        $('#fileName').val(''); // Clear the file name field
        $('#fileSize').text(''); // Clear the file size
    } else {
        fileSizeMessage.text(`File size: ${utils.formatFileSize(file.size)} (Max: ${maxFileSizeGB} GB)`).removeClass('text-danger');
    }
}

// Rename preview update function
function updateRenamePreview() {
    console.log('Updating rename preview');
    const operation = $('#operation').val().replace(/\s+/g, '_');
    const itemNumber = $('#itemNumber').val();
    const subNumber = $('#subNumber').val();
    const deviceType = $('#deviceType').val();
    const collectionDate = $('#dateOfCollection').val();
    const fileInput = $('#selectFile')[0];
    let fileExtension = utils.getFileExtension(fileInput.files[0]?.name || '');

    const renamePreview = `${operation}_${itemNumber}-${subNumber}_${deviceType}_${collectionDate}${fileExtension}`;
    console.log('New rename preview:', renamePreview);
    $('#renamePreview').val(renamePreview);
}


project\static\js\core\utils.js
===============================
// project/static/js/core/utils.js

/**
 * Shared utility functions for the application
 */

const utils = {
    /**
     * Format file size in human-readable format
     * @param {number} bytes - File size in bytes
     * @returns {string} Formatted file size string
     */
    formatFileSize: function(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    },

    /**
     * Check if a file size is within the allowed limit
     * @param {number} fileSize - File size in bytes
     * @param {number} maxSize - Maximum allowed size in bytes
     * @returns {boolean} True if file is within size limit
     */
    checkFileSize: function(fileSize, maxSize) {
        return fileSize <= maxSize;
    },

    /**
     * Generate a formatted timestamp
     * @returns {string} Formatted timestamp string
     */
    getTimestamp: function() {
        return new Date().toLocaleTimeString('en-US', { 
            hour12: false, 
            hour: '2-digit', 
            minute: '2-digit' 
        }).replace(':', '');
    },

    /**
     * Clean filename by removing invalid characters
     * @param {string} filename - Original filename
     * @returns {string} Cleaned filename
     */
    cleanFilename: function(filename) {
        return filename.replace(/[^a-z0-9_.-]/gi, '_');
    },

    /**
     * Get file extension from filename
     * @param {string} filename - Filename to process
     * @returns {string} File extension including dot
     */
    getFileExtension: function(filename) {
        const lastDotIndex = filename.lastIndexOf('.');
        return lastDotIndex !== -1 ? filename.substring(lastDotIndex) : '';
    }
};

// Export utilities to global scope
window.utils = utils;


project\templates\404.html
==========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>404 Not Found</title>
</head>
<body>
    <h1>404 Not Found</h1>
    <p>The requested page could not be found. Please check the URL and try again.</p>
    <a href="{{ url_for('client_app.home') }}">Return to Home</a>
</body>
</html>


project\templates\500.html
==========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>500 Internal Server Error</title>
</head>
<body>
    <h1>500 Internal Server Error</h1>
    <p>The server encountered an internal error and was unable to complete your request. Either the server is overloaded or there is an error in the application.</p>
</body>
</html>


project\templates\base.html
===========================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Client App{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Custom CSS -->
    <link rel="stylesheet" href="{{ url_for('static', filename='css/custom.css') }}">
    
    {% block extra_head %}{% endblock %}
</head>
<body>
    <!-- Classification bar -->
    <div class="bg-primary text-white p-2 text-center w-100"><strong>Classification Bar</strong></div>

    <!-- Notice bar -->
    <div class="bg-danger text-white p-2 text-center w-100" style="font-weight: bold; height: 40px; line-height: 40px; display: flex; align-items: center; justify-content: center;">Notice Bar: User Notices Here</div>

    <div class="container mt-4">
        {% block content %}{% endblock %}
    </div>

    <!-- Core JavaScript Dependencies -->
    {% block scripts %}
        <!-- jQuery first -->
        <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
        
        <!-- Bootstrap Bundle with Popper -->
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    {% endblock %}
</body>
</html>


project\templates\home.html
===========================
{% extends "base.html" %}

{% block title %}Data Ingestion Client Panel{% endblock %}

{% block content %}
    <!-- Review Modal -->
    <div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="confirmationModalLabel">Review Data Ingestion Request</h5>
                </div>
                <div class="modal-body">
                    <p>Please review your submission before proceeding:</p>
                    <div class="table-responsive">
                        <table class="table table-bordered confirmation-table">
                            <thead>
                                <tr>
                                    <th>From Field</th>
                                    <th class="from-value">From Value</th>
                                    <th class="reviewed-column">Reviewed</th>
                                </tr>
                            </thead>
                            <tbody id="confirmationTableBody">
                                <!-- Rows will be dynamically added here by script.js -->
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" id="cancelReview" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="confirmSubmit" disabled>Submit</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Progress Modal -->
    <div class="modal fade" id="progressModal" tabindex="-1" aria-labelledby="progressModalLabel" aria-hidden="true" data-bs-backdrop="static" data-bs-keyboard="false">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="progressModalLabel">File Processing</h5>
                </div>
                <div class="modal-body">
                    <div class="progress mb-3">
                        <div id="progressBar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                    </div>
                    <p id="progressText" class="mb-2">Initializing...</p>
                    <p id="progressDetails" class="small text-muted"></p>
                    
                    <!-- Completion Information (initially hidden) -->
                    <div id="completionInfo" class="mt-4 d-none">
                        <h6 class="border-bottom pb-2">File Information</h6>
                        <div class="row g-3">
                            <div class="col-12">
                                <p><strong>Original Filename:</strong> <span id="origFilename"></span></p>
                                <p><strong>New Filename:</strong> <span id="newFilename"></span></p>
                            </div>
                            <div class="col-12">
                                <p><strong>Original Hash:</strong> <span id="origHash" class="font-monospace small"></span></p>
                                <p><strong>New Hash:</strong> <span id="newHash" class="font-monospace small"></span></p>
                            </div>
                            <div class="col-12">
                                <p><strong>File Size:</strong> <span id="fileSize"></span></p>
                                <div id="verificationStatus" class="text-center mt-2">
                                    <!-- Will be filled with verification badge -->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-danger" id="cancelUpload">Cancel</button>
                    <button type="button" class="btn btn-success d-none" id="completeButton">Complete</button>
                </div>
            </div>
        </div>
    </div>

    <h2 class="mt-4 mb-3 text-center">Data Ingestion Client Panel</h2>
    <div class="card shadow-lg">
        <div class="card-body">
            <form id="dataIngestionForm">
                <!-- Form content remains the same -->
                <!-- Select a file -->
                <div class="mb-3">
                    <label for="selectFile" class="form-label">Select a file</label>
                    <input type="file" class="form-control" id="selectFile" name="file">
                    <small id="fileSizeMessage" class="form-text"></small>
                </div>

                <!-- Pre-fill -->
                <div class="mb-3 text-center">
                    <button type="button" class="btn btn-secondary" id="preFill">Pre-fill</button>
                </div>

                <!-- Operation -->
                <div class="mb-3">
                    <label for="operation" class="form-label">Operation</label>
                    <input type="text" class="form-control" id="operation" name="operation">
                </div>

                <!-- File Information Section -->
                <div class="mb-3">
                    <h5>File Information</h5>
                    <div class="row">
                        <div class="col">
                            <label for="fileSelectCheck" class="form-label">Select</label>
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" value="" id="fileSelectCheck" checked>
                                <label class="form-check-label" for="fileSelectCheck">Select</label>
                            </div>
                        </div>
                        <div class="col">
                            <label for="fileName" class="form-label">File Name</label>
                            <input type="text" class="form-control" id="fileName" name="file_name" placeholder="File name" readonly>
                            <small id="fileSize" class="form-text"></small>
                        </div>
                        <div class="col">
                            <label for="deviceType" class="form-label">Device Type</label>
                            <select class="form-select" id="deviceType" name="device_type">
                                <option value="laptop">Laptop</option>
                                <option value="phone">Phone</option>
                                <option value="other">Other</option>
                                <option value="unknown">Unknown</option>
                            </select>
                        </div>
                        <div class="col">
                            <label for="serialNumber" class="form-label">Serial No</label>
                            <input type="text" class="form-control" id="serialNumber" name="serial_number" placeholder="Serial No">
                        </div>
                        <div class="col">
                            <label for="itemNumber" class="form-label">Item No</label>
                            <input type="text" class="form-control" id="itemNumber" name="item_number" value="001">
                        </div>
                        <div class="col">
                            <label for="subNumber" class="form-label">Sub No</label>
                            <input type="text" class="form-control" id="subNumber" name="sub_number" value="1">
                        </div>
                    </div>
                </div>

                <!-- Collection -->
                <div class="mb-3">
                    <label for="collection" class="form-label">Collection</label>
                    <select class="form-select" id="collection" name="collection">
                        <option value="red">Red</option>
                        <option value="blue">Blue</option>
                        <option value="green">Green</option>
                        <option value="unknown">Unknown</option>
                    </select>
                </div>

                <!-- Platform -->
                <div class="mb-3">
                    <label for="platform" class="form-label">Platform</label>
                    <select class="form-select" id="platform" name="platform">
                        <option value="red">Windows</option>
                        <option value="blue">MacOS</option>
                        <option value="unknown">Unknown</option>
                    </select>
                </div>

                <!-- Date of Collection -->
                <div class="mb-3">
                    <label for="dateOfCollection" class="form-label">Date of Collection</label>
                    <input type="date" class="form-control" id="dateOfCollection" name="date_of_collection">
                </div>

                <!-- Known Passwords -->
                <div class="mb-3">
                    <label for="knownPasswords" class="form-label">Known passwords (separated with comma)</label>
                    <input type="text" class="form-control" id="knownPasswords" name="known_passwords">
                </div>

                <!-- Notes -->
                <div class="mb-3">
                    <label for="notes" class="form-label">Notes</label>
                    <textarea class="form-control" id="notes" name="notes" rows="2"></textarea>
                </div>

                <!-- Rename File and Manual Processing Section -->
                <div class="mb-3">
                    <div class="form-check">
                        <input class="form-check-input" type="checkbox" value="" id="renameFileCheck">
                        <label class="form-check-label" for="renameFileCheck">Rename file</label>
                    </div>
                    <label for="renamePreview" class="form-label mt-2">File Name Preview</label>
                    <input type="text" class="form-control" id="renamePreview" value="" readonly>
                </div>

                <div class="mb-3">
                    <label for="processingMethod" class="form-label">Processing Method</label>
                    <select class="form-select" id="processingMethod" name="processingMethod">
                        <option value="Normal" selected>Normal</option>
                        <option value="MX Pipeline">MX Pipeline</option>
                        <option value="Manual on PN03">Manual on PN03</option>
                        <option value="Manual on PN04">Manual on PN04</option>
                    </select>
                </div>

                <!-- Submit Button -->
                <div class="text-center">
                    <button type="button" class="btn btn-primary" id="openConfirmationModal">Submit</button>
                </div>
            </form>
        </div>
    </div>
{% endblock %}

{% block scripts %}
    {{ super() }}
    <script src="{{ url_for('static', filename='js/core/utils.js') }}"></script>
    <script src="{{ url_for('static', filename='js/modal-handlers.js') }}"></script>
    <script src="{{ url_for('static', filename='js/file-processing.js') }}"></script>
    <script src="{{ url_for('static', filename='js/form-handlers.js') }}"></script>
    <script src="{{ url_for('static', filename='js/chunked-upload.js') }}"></script>
{% endblock %}

